---
title: "Week 5 Lab"
author: "Leilanie Rubinstein"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## 1. Set up

```{r}
# Load packages
library(sf)
library(terra)
library(tidyverse)
library(tmap)
library(spData)
library(spDataLarge)
library(viridisLite)
```

```{r}
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
```

```{r}
# Check if CRS matched, if not then transform
if (crs(elevation) == crs(boundary)) {
  print("CRS match")
} else {
  warning("update CRS to match")
  boundary <- st_transform(boundary, st_crs(elevation))
}

crs(elevation) == crs(boundary)
```

```{r}
tm_shape(elevation) + 
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 2) +
  tm_layout(legend.outside = TRUE)
```

## 2. Raster cropping

```{r}
# Crop to the extent of the vector object
elevation_cropped <- terra::crop(elevation, boundary)

tm_shape(elevation_cropped) + 
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 2) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# mask raster based on vector object
# convert cells outside of the park to NA
elevation_masked <- terra::mask(elevation_cropped, boundary) # pass in cropped version so there aren't cells outside of the boundary

tm_shape(elevation_masked) + 
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 1) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# mask raster based on vector object
# convert cells outside of the park to NA
elevation_masked <- terra::mask(elevation_cropped, boundary, inverse = TRUE)

tm_shape(elevation_masked) + 
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 1) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# Masking to cells inside of the park
elevation_inside <- terra::mask(elevation_cropped, boundary)

# Create a mask based on the value of the cells
# make a duplicate copy
elevation_mask <- elevation_inside

# directly reassign layer names
names(elevation) <- "elevation"

# reassign the values to NA
elevation_mask[elevation_mask < 2000] <- NA

tm_shape(elevation_mask) + 
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 1) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# polygon of locations within Zion

# st_union will remove any internal boundaries


elevation_mask_poly <- terra::as.polygons(elevation_mask) %>%
  st_as_sf()

tm_shape(elevation_mask_poly) + 
  tm_polygons() +
  tm_layout(legend.outside = TRUE)
```

```{r}
# extract values based on points and lines
data("zion_points", package = "spDataLarge")
 
crs(zion_points) == crs(elevation)

zion_points <- st_transform(zion_points, crs = st_crs(elevation))

tm_shape(elevation) +
  tm_raster() +
  tm_shape(boundary) +
  tm_borders() + 
  tm_shape(zion_points) + 
  tm_symbols()

pts_elevation <- terra::extract(elevation, zion_points)

# reattach to sf object
zion_points <- cbind(zion_points, pts_elevation)
```

```{r}
# Creating an sf object that is transects of the park
zion_transect <- cbind(c(-133.2, -112.9),
                       c(37.45, 37.2)) %>%
  st_linestring() %>%
  st_sfc(crs = crs(elevation)) %>%
  st_sf(geometry = .)

tm_shape(elevation) +
  tm_raster() +
  tm_shape(zion_transect) +
  tm_lines()

# create an ID for each transect
zion_transect$id = 1:nrow(zion_transect)

# turn into segments, 250 is the max length for each of the segments
zion_transect <- st_segmentize(zion_transect, dfMaxLength = 250)

# turn a line into a series of points so we can extract the values at those points
zion_transect <- st_cast(zion_transect, "POINT")

# distance along transect
zion_transect <- zion_transect %>%
  group_by(id) %>%
  mutate(dist = st_distance(geometry)[,1]) # find the distance from the transect before it


transect <- terra::extract(elevation, zion_transect)

# bind back to original data
zion_transect <- cbind(zion_transect, transect)

# load units package before plotting
library(units)

zion_transect <- zion_transect %>%
  filter(!is.na(elevation))

# plot results
ggplot(zion_transect, aes(x = ID, y = elevation)) +
  geom_point() +
```

